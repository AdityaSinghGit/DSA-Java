For DP problems, follow the 3 simple rules under the following methods-

### RECURSION AND MEMOIZATION (TOP - DOWN)
1) Express in terms of (index, given)
-> NOTE: Insert -1 in dpArr

2) Explore all possibilities (eg. pick and notPick)

3) Memoization (all possibilities)


### TABULATION (BOTTOM - UP)
1) Write the Base case
-> NOTE: Insert 0 in dpArr {Default is always 0 in java so this is optional}

2) Write the changing parameters (index, given)
-> NOTE: Number of changing parameters = Number of nested loops

3) Copy the recurrence

### SPACE OPTIMIZATION


***************************************************************************************


If a question asks you to "count the number of ways" then follow the rule below:

'''
1)    function(){

2)        Base Case  //returns either 1 or 0

3)        return function() + function();
      }
'''

Eg: E:\Java\dsa\dp\subSet\strings\DistinctSubSeq115.java


***************************************************************************************


How to write a recurrence in case of strings?

1) Express everything in terms of (i,j) where i = first string, j = second string
2) Explore all possibilities
3) Return sum of all possibilities
4) Base case

Eg: E:\Java\dsa\dp\subSet\strings\DistinctSubSeq115.java